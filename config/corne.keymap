/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
  keymap {
    compatible = "zmk,keymap";

    base_layer {
      label = "BASE";
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
      bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
      >;
    };

    symbols_layer {
      label = "SYM";
// -----------------------------------------------------------------------------------------
// |  `   |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | CTRL |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  ~   |
// | SHFT |  =  |  +  |  -  |  _  |  ?  |   |  [  |  ]  |  {  |  }  |  \  | "|"  |
//                    | GUI |     | SPC |   | ENT |     | ALT |
      bindings = <
   &kp TILDE  &kp N1    &kp N2   &kp N3    &kp N4    &kp N5      &kp N6    &kp N7    &kp N8    &kp N9   &kp N0   &kp BSPC
   &kp LCTRL  &kp EXCL  &kp AT   &kp HASH  &kp DLLR  &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp GRAVE
   &kp LSHFT  &kp EQUAL &kp PLUS &kp MINUS &kp UNDER &kp QMARK   &kp LBKT  &kp RBKT  &kp LBRC  &kp RBRC &kp BSLH &kp PIPE
                                 &kp LGUI  &trans    &kp SPACE   &kp RET   &trans    &kp RALT
      >;
    };

    nav_layer {
      label = "NAV";
// -----------------------------------------------------------------------------------------
// |  TAB |  LS(TAB)   |       |       |       |       |     | LA(LFT) | LA(DWN) | LA(UP) | LA(RGT) |     | BSPC |
// | CTRL |  LA(TAB)   |       | SC UP | SC DN |       |     | LFT     | DWN     | UP     | RGT     |     |      |
// | SHFT | LA(LS(TAB) | PG UP |  HOME |  END  | PG DN |     | LS(LFT) | LS(DWN) | LS(UP) | LS(RGT) |     | ESC  |
//                             |  GUI  |       | SPC   |     | ENT     |         | ALT    |
      bindings = <
   &kp  TAB  &kp LS(TAB)     &trans    &trans          &trans             &trans    &kp LA(LEFT) &kp LA(DOWN) &kp LA(UP) &kp LA(RIGHT) &trans &kp BSPC
   &kp LCTRL &kp LA(TAB)     &trans    &kp K_SCROLL_UP &kp K_SCROLL_DOWN  &trans    &kp LEFT     &kp DOWN     &kp UP     &kp RIGHT     &trans &trans
   &kp LSHFT &kp LA(LS(TAB)) &kp PG_UP &kp HOME        &kp END            &kp PG_DN &kp LS(LEFT) &kp LS(DOWN) &kp LS(UP) &kp LS(RIGHT) &trans &kp ESC
                                       &kp LGUI &trans &kp SPACE          &kp RET   &trans       &kp RALT
      >;
    };

    func_layer {
      label = "FUN";
// -----------------------------------------------------------------------------------------
// | F1 |  F2  |  F3  |   F4   |  F5  |   F6   |    |   F7   |   F8   |  F9  |  F10  | F11 | F12 |
// | PP | PREV | NEXT | VOL UP | MUTE | VOL DN |    | BRG UP | BRG DN | LOCK | SLEEP |     |     |
// |    | BT 1 | BT 2 |  BT 3  | BT 4 |  BT 5  |    |        |        |      |       |     |     |
//                    |        |      |        |    |        |        |      |
      bindings = <
   &kp F1   &kp F2       &kp F3       &kp F4       &kp F5       &kp F6        &kp F7               &kp F8                &kp F9     &kp F10     &kp F11 &kp F12
   &kp K_PP &kp K_PREV   &kp K_NEXT   &kp K_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_INC  &kp K_LOCK &kp K_SLEEP &trans  &trans
   &trans   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4  &trans &trans &trans &trans  &trans  &trans
                                      &trans       &trans       &tran         &trans &trans &trans
      >;
    };
  };

  combos {
    compatible = "zmk,combos";

    clear_ble {
      bindings = <&bt BT_CLR>;
      key-positions = <0 38 5>;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";
    activate_func_layer {
      if-layers = <1 2>;
      then-layer = <3>;
    };
  };
};
